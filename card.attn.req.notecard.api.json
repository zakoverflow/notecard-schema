{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://raw.githubusercontent.com/blues/notecard-schema/master/card.attn.req.notecard.api.json",
    "title": "card.attn Request Application Programming Interface (API) Schema",
    "description": "Configure hardware notification from the Notecard to MCU host. Note: Requires a connection between the notecard ATTN pin and a GPIO pin on the host MCU.",
    "type": "object",
    "skus": ["CELL", "CELL+WIFI", "LORA", "WIFI"],
    "properties": {
        "files": {
            "description": "A list of Notefiles to watch for file-based interrupts.",
            "type": "array",
            "items": {
                "type": "string",
                "pattern": "^.+\\.(qo|qi|db|dbs)$"
            },
            "minItems": 1
        },
        "mode": {
            "description": "A comma-separated list of one or more of the following keywords. Some keywords are only supported on certain types of Notecards.",
            "type": "string",
            "pattern": "^(?:-all|-env|-files|-location|-motion|-usb|arm|auxgpio|connected|disarm|env|files|location|motion|motionchange|rearm|signal|sleep|usb|watchdog|wireless)(?:,\\s*(?:-all|-env|-files|-location|-motion|-usb|arm|auxgpio|connected|disarm|env|files|location|motion|motionchange|rearm|signal|sleep|usb|watchdog|wireless))*\\s*$",
            "sub-descriptions": [
                {
                    "const": "",
                    "description": "Fetches currently pending events in the \"files\" collection.",
                    "skus": ["CELL", "CELL+WIFI", "WIFI"]
                },
                {
                    "const": "arm",
                    "description": "Clear \"files\" events and cause the ATTN pin to go LOW. After an event occurs or \"seconds\" has elapsed, the ATTN pin will then go HIGH (a.k.a. \"fires\"). If \"seconds\" is 0, no timeout will be scheduled. If ATTN is armed, calling `arm` again will disarm (briefly pulling ATTN HIGH), then arm (non-idempotent).",
                    "skus": ["CELL", "CELL+WIFI", "LORA", "WIFI"]
                },
                {
                    "const": "auxgpio",
                    "description": "When armed, causes ATTN to fire if an AUX GPIO input changes. Disable by using `-auxgpio`.",
                    "skus": ["CELL", "CELL+WIFI", "LORA", "WIFI"]
                },
                {
                    "const": "connected",
                    "description": "When armed, will cause ATTN to fire whenever the module connects to cellular. Disable with `-connected`.",
                    "skus": ["CELL", "CELL+WIFI", "WIFI"]
                },
                {
                    "const": "disarm",
                    "description": "Causes ATTN pin to go HIGH if it had been LOW. Passing both \"disarm\" and \"-all\" clears all ATTN monitors currently set.",
                    "skus": ["CELL", "CELL+WIFI", "LORA", "WIFI"]
                },
                {
                    "const": "env",
                    "description": "When armed, causes ATTN to fire if an environment variable changes on the Notecard. Disable by using `-env`.",
                    "skus": ["CELL", "CELL+WIFI", "LORA", "WIFI"]
                },
                {
                    "const": "files",
                    "description": "When armed, will cause ATTN to fire if any of the \"files\" are modified. Disable by using `-files`.",
                    "skus": ["CELL", "CELL+WIFI", "LORA", "WIFI"]
                },
                {
                    "const": "location",
                    "description": "When armed, will cause ATTN to fire whenever the Notecard GPS module makes a position fix. Disable by using `-location`.",
                    "skus": ["CELL", "CELL+WIFI", "WIFI"]
                },
                {
                    "const": "motion",
                    "description": "When armed, will cause ATTN to fire whenever the accelerometer detects module motion. Disable with `-motion`.",
                    "skus": ["CELL", "CELL+WIFI", "WIFI"]
                },
                {
                    "const": "motionchange",
                    "description": "When armed, will cause ATTN to fire whenever the `card.motion.mode` changes from \"moving\" to \"stopped\" (or vice versa).",
                    "skus": ["CELL", "CELL+WIFI", "WIFI"]
                },
                {
                    "const": "rearm",
                    "description": "Will arm ATTN if not already armed. Otherwise, resets the values of `mode`, `files`, and `seconds` specified in the initial `arm` or `rearm` request (idempotent).",
                    "skus": ["CELL", "CELL+WIFI", "WIFI"]
                },
                {
                    "const": "signal",
                    "description": "When armed, will cause ATTN to fire whenever the Notecard receives a signal.",
                    "skus": ["CELL", "CELL+WIFI", "WIFI"]
                },
                {
                    "const": "sleep",
                    "description": "Instruct the Notecard to pull the ATTN pin low for a period of time, and optionally keep a payload in memory. Can be used by the host to sleep the host MCU.",
                    "skus": ["CELL", "CELL+WIFI", "WIFI"]
                },
                {
                    "const": "usb",
                    "description": "When armed, will enable USB power events firing the ATTN pin. Disable with `-usb`.",
                    "skus": ["CELL", "CELL+WIFI", "LORA", "WIFI"]
                },
                {
                    "const": "watchdog",
                    "description": "Not an \"arm\" mode, rather will cause the ATTN pin to go from HIGH to LOW, then HIGH if the notecard fails to receive any JSON requests for \"seconds.\" In this mode, \"seconds\" must be >= 60.",
                    "skus": ["CELL", "CELL+WIFI", "WIFI"]
                },
                {
                    "const": "wireless",
                    "description": "Instruct the Notecard to fire the ATTN pin whenever the `card.wireless` status changes.",
                    "skus": ["CELL", "CELL+WIFI", "WIFI"]
                }
            ]
        },
        "off": {
            "description": "When `true`, completely disables ATTN processing and sets the pin OFF. This setting is retained across device restarts.",
            "type": "boolean"
        },
        "on": {
            "description": "When `true`, enables ATTN processing. This setting is retained across device restarts.",
            "type": "boolean"
        },
        "payload": {
            "description": "When using `sleep` mode, a payload of data from the host that the Notecard should hold in memory until retrieved by the host.",
            "type": "string",
            "format": "binary"
        },
        "seconds": {
            "description": "To set an ATTN timeout when arming, or when using `sleep`. NOTE: When the Notecard is in `continuous` mode, the `seconds` timeout is serviced by a routine that wakes every 15 seconds. You can predict when the device will wake, by rounding up to the nearest 15 second interval.",
            "type": "integer",
            "minimum": 0
        },
        "start": {
            "description": "When using `sleep` mode and the host has reawakened, request the Notecard to return the stored `payload`.",
            "type": "boolean"
        },
        "verify": {
            "description": "When `true`, returns the current attention mode configuration, if any.",
            "type": "boolean"
        },
        "cmd": {
            "description": "Command for the Notecard (no response)",
            "const": "card.attn"
        },
        "req": {
            "description": "Request for the Notecard (expects response)",
            "const": "card.attn"
        }
    },
    "oneOf": [
        {
            "required": [
                "req"
            ],
            "properties": {
                "req": {
                    "const": "card.attn"
                }
            }
        },
        {
            "required": [
                "cmd"
            ],
            "properties": {
                "cmd": {
                    "const": "card.attn"
                }
            }
        }
    ],
    "additionalProperties": false,
    "allOf": [
        {
            "if": {
                "properties": {
                    "mode": {
                        "type": "string",
                        "pattern": "(^watchdog$|^watchdog,|,*\\s*watchdog\\s*,|,*\\s*watchdog$)"
                    }
                },
                "required": [
                    "mode"
                ]
            },
            "then": {
                "properties": {
                    "seconds": {
                        "minimum": 60
                    }
                },
                "required": [
                    "seconds"
                ]
            },
            "else": {
                "if": {
                    "properties": {
                        "mode": {
                            "type": "string",
                            "pattern": "(^sleep$|^sleep,|,*\\s*sleep\\s*,|,*\\s*sleep$)"
                        }
                    },
                    "required": [
                        "mode"
                    ]
                },
                "then": {
                    "properties": {
                        "seconds": {
                            "minimum": 0
                        }
                    },
                    "required": [
                        "seconds"
                    ]
                },
                "else": {
                    "not": {
                        "required": [
                            "seconds"
                        ]
                    }
                }
            }
        },
        {
            "if": {
                "properties": {
                    "mode": {
                        "type": "string",
                        "pattern": "(^files$|^files,|,*\\s*files\\s*,|,*\\s*files$)"
                    }
                },
                "required": [
                    "mode"
                ]
            },
            "then": {
                "required": [
                    "files"
                ]
            },
            "else": {
                "not": {
                    "required": [
                        "files"
                    ]
                }
            }
        }
    ],
    "version": "0.2.0",
    "apiVersion": "9.1.1"
}
